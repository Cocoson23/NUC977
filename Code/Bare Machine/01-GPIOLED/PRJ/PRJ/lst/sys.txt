; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\sys.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sys.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931 -I..\..\Driver\Include -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\Toshiba -D__UVISION_VERSION=524 --omf_browse=.\obj\sys.crf ..\..\Driver\Source\sys.c]
                          ARM

                          AREA ||i.SYS_Interrupt_Shell||, CODE, READONLY, ALIGN=2

                  SYS_Interrupt_Shell PROC
;;;182    
;;;183    void SYS_Interrupt_Shell()
000000  e59f0008          LDR      r0,|L1.16|
;;;184    {
;;;185        sysprintf("ISR not found! ISNR=%d\n", inpw(REG_AIC_ISNR));
000004  e5901120          LDR      r1,[r0,#0x120]
000008  e28f0004          ADR      r0,|L1.20|
00000c  eafffffe          B        sysprintf
;;;186    }
;;;187    
                          ENDP

                  |L1.16|
                          DCD      0xb8002000
                  |L1.20|
000014  49535220          DCB      "ISR not found! ISNR=%d\n",0
000018  6e6f7420
00001c  666f756e
000020  64212049
000024  534e523d
000028  25640a00

                          AREA ||i.sysDisableInterrupt||, CODE, READONLY, ALIGN=2

                  sysDisableInterrupt PROC
;;;204     */
;;;205    INT32 sysDisableInterrupt(IRQn_Type eIntNo)
000000  e2401001          SUB      r1,r0,#1
;;;206    {
;;;207        if ((eIntNo > SYS_MAX_INT_SOURCE) || (eIntNo < SYS_MIN_INT_SOURCE))
000004  e351003e          CMP      r1,#0x3e
;;;208            return 1;
000008  23a00001          MOVCS    r0,#1
;;;209    
;;;210        if (eIntNo < 32)
;;;211            outpw(REG_AIC_MDCR, (1 << eIntNo));
;;;212        else
;;;213            outpw(REG_AIC_MDCRH, (1 << (eIntNo - 32)));
;;;214    
;;;215        return 0;
;;;216    }
00000c  212fff1e          BXCS     lr
000010  e3500020          CMP      r0,#0x20              ;210
000014  e3a02001          MOV      r2,#1                 ;208
000018  22400020          SUBCS    r0,r0,#0x20           ;210
00001c  e59f1010          LDR      r1,|L2.52|
000020  e1a00012          LSL      r0,r2,r0              ;213
000024  35810138          STRCC    r0,[r1,#0x138]        ;211
000028  2581013c          STRCS    r0,[r1,#0x13c]        ;213
00002c  e3a00000          MOV      r0,#0                 ;215
000030  e12fff1e          BX       lr
;;;217    
                          ENDP

                  |L2.52|
                          DCD      0xb8002000

                          AREA ||i.sysEnableInterrupt||, CODE, READONLY, ALIGN=2

                  sysEnableInterrupt PROC
;;;225     */
;;;226    INT32 sysEnableInterrupt(IRQn_Type eIntNo)
000000  e2401001          SUB      r1,r0,#1
;;;227    {
;;;228        if ((eIntNo > SYS_MAX_INT_SOURCE) || (eIntNo < SYS_MIN_INT_SOURCE))
000004  e351003e          CMP      r1,#0x3e
;;;229            return 1;
000008  23a00001          MOVCS    r0,#1
;;;230    
;;;231        if (eIntNo < 32)
;;;232            outpw(REG_AIC_MECR, (1 << eIntNo));
;;;233        else
;;;234            outpw(REG_AIC_MECRH, (1 << (eIntNo - 32)));
;;;235    
;;;236        return 0;
;;;237    }
00000c  212fff1e          BXCS     lr
000010  e3500020          CMP      r0,#0x20              ;231
000014  e3a02001          MOV      r2,#1                 ;229
000018  22400020          SUBCS    r0,r0,#0x20           ;231
00001c  e59f1010          LDR      r1,|L3.52|
000020  e1a00012          LSL      r0,r2,r0              ;234
000024  35810130          STRCC    r0,[r1,#0x130]        ;232
000028  25810134          STRCS    r0,[r1,#0x134]        ;234
00002c  e3a00000          MOV      r0,#0                 ;236
000030  e12fff1e          BX       lr
;;;238    
                          ENDP

                  |L3.52|
                          DCD      0xb8002000

                          AREA ||i.sysFiqHandler||, CODE, READONLY, ALIGN=2

                  sysFiqHandler PROC
;;;169    
;;;170    __irq void sysFiqHandler()
000000  e92d501f          PUSH     {r0-r4,r12,lr}
;;;171    {
;;;172        UINT32 volatile _mIPER, _mISNR;
;;;173    
;;;174        _mIPER = (inpw(REG_AIC_IPER) >> 2) & 0x3f;
000004  e59f4058          LDR      r4,|L4.100|
000008  e24dd00c          SUB      sp,sp,#0xc            ;171
00000c  e5940118          LDR      r0,[r4,#0x118]
000010  e1a00c00          LSL      r0,r0,#24
000014  e1a00d20          LSR      r0,r0,#26
;;;175        _mISNR = inpw(REG_AIC_ISNR);
000018  e58d0000          STR      r0,[sp,#0]
00001c  e5940120          LDR      r0,[r4,#0x120]
;;;176        sysprintf("ISNR = %d\n", _mISNR);
000020  e1a01000          MOV      r1,r0
000024  e58d0004          STR      r0,[sp,#4]            ;175
000028  e28f0038          ADR      r0,|L4.104|
00002c  ebfffffe          BL       sysprintf
;;;177        if (_mISNR != 0)
000030  e59d0004          LDR      r0,[sp,#4]
000034  e3500000          CMP      r0,#0
000038  0a000004          BEQ      |L4.80|
00003c  e1cd00d0          LDRD     r0,r1,[sp,#0]
;;;178            if (_mIPER == _mISNR)
000040  e1500001          CMP      r0,r1
;;;179                (*sysFiqHandlerTable[_mISNR])();
000044  059f0028          LDREQ    r0,|L4.116|
000048  07900101          LDREQ    r0,[r0,r1,LSL #2]
00004c  012fff30          BLXEQ    r0
                  |L4.80|
;;;180        outpw(REG_AIC_EOSCR, 1);
000050  e3a00001          MOV      r0,#1
000054  e5840150          STR      r0,[r4,#0x150]
;;;181    }
000058  e28dd00c          ADD      sp,sp,#0xc
00005c  e8bd501f          POP      {r0-r4,r12,lr}
000060  e25ef004          SUBS     pc,lr,#4
;;;182    
                          ENDP

                  |L4.100|
                          DCD      0xb8002000
                  |L4.104|
000068  49534e52          DCB      "ISNR = %d\n",0
00006c  203d2025
000070  640a00  
000073  00                DCB      0
                  |L4.116|
                          DCD      ||.data||+0xfc

                          AREA ||i.sysGetClock||, CODE, READONLY, ALIGN=2

                  sysGetClock PROC
;;;495     */
;;;496    UINT32 sysGetClock(CLK_Type clk)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;497    {
000004  e1a03000          MOV      r3,r0
;;;498        UINT32 src, divS, divN, reg, div;
;;;499    
;;;500        switch(clk) {
;;;501        case SYS_UPLL:
;;;502                return sysGetPLL(REG_CLK_UPLLCON);
000008  e59f01a8          LDR      r0,|L5.440|
00000c  e3530008          CMP      r3,#8                 ;500
000010  e3a05001          MOV      r5,#1                 ;497
;;;503    
;;;504        case SYS_APLL:
;;;505                return sysGetPLL(REG_CLK_APLLCON);
000014  e2402004          SUB      r2,r0,#4
;;;506    
;;;507        case SYS_SYSTEM: {
;;;508                reg = inpw(REG_CLK_DIVCTL0);
000018  e3a0120b          MOV      r1,#0xb0000000
00001c  308ff103          ADDCC    pc,pc,r3,LSL #2       ;500
000020  ea000013          B        |L5.116|
000024  ea000012          B        |L5.116|
000028  ea000005          B        |L5.68|
00002c  ea000006          B        |L5.76|
000030  ea000007          B        |L5.84|
000034  ea000016          B        |L5.148|
000038  ea000027          B        |L5.220|
00003c  ea000034          B        |L5.276|
000040  ea000047          B        |L5.356|
                  |L5.68|
000044  e8bd4070          POP      {r4-r6,lr}            ;502
000048  eafffffe          B        sysGetPLL
                  |L5.76|
00004c  e1a00002          MOV      r0,r2                 ;505
000050  eafffffb          B        |L5.68|
                  |L5.84|
000054  e5914220          LDR      r4,[r1,#0x220]
;;;509            switch (reg & 0x18) {
000058  e2141018          ANDS     r1,r4,#0x18
;;;510        case 0x0:
;;;511                src = 12;   /* HXT */
00005c  03a0000c          MOVEQ    r0,#0xc
000060  0a000006          BEQ      |L5.128|
000064  e3510010          CMP      r1,#0x10              ;509
;;;512            break;
;;;513        case 0x10:
;;;514                src = sysGetPLL(REG_CLK_APLLCON);
000068  01a00002          MOVEQ    r0,r2
00006c  13510018          CMPNE    r1,#0x18              ;509
000070  0a000001          BEQ      |L5.124|
                  |L5.116|
;;;515                break;
;;;516            case 0x18:
;;;517                    src = sysGetPLL(REG_CLK_UPLLCON);
;;;518                break;
;;;519            default:
;;;520                    return 0;
;;;521            }
;;;522        divS = (reg & 0x7) + 1;
;;;523               divN = ((reg & 0xf00) >> 8) + 1;
;;;524               return (src / divS / divN);
;;;525        }
;;;526    
;;;527        case SYS_HCLK1: {
;;;528                reg = inpw(REG_CLK_DIVCTL0);
;;;529            switch (reg & 0x18) {
;;;530        case 0x0:
;;;531                src = 12;   /* HXT */
;;;532            break;
;;;533        case 0x10:
;;;534                src = sysGetPLL(REG_CLK_APLLCON);
;;;535                break;
;;;536            case 0x18:
;;;537                    src = sysGetPLL(REG_CLK_UPLLCON);
;;;538                break;
;;;539            default:
;;;540                    return 0;
;;;541            }
;;;542        divS = (reg & 0x7) + 1;
;;;543               divN = ((reg & 0xf00) >> 8) + 1;
;;;544               return (src / divS / divN / 2);
;;;545        }
;;;546    
;;;547        case SYS_HCLK234: {
;;;548                reg = inpw(REG_CLK_DIVCTL0);
;;;549            switch (reg & 0x18) {
;;;550        case 0x0:
;;;551                src = 12;   /* HXT */
;;;552            break;
;;;553        case 0x10:
;;;554                src = sysGetPLL(REG_CLK_APLLCON);
;;;555                break;
;;;556            case 0x18:
;;;557                    src = sysGetPLL(REG_CLK_UPLLCON);
;;;558                break;
;;;559            default:
;;;560                    return 0;
;;;561            }
;;;562        divS = (reg & 0x7) + 1;
;;;563               divN = ((reg & 0xf00) >> 8) + 1;
;;;564               div = ((reg & 0xf00000) >> 20) + 1;
;;;565               return (src / divS / divN / 2 / div);
;;;566        }
;;;567    
;;;568        case SYS_PCLK: {
;;;569                reg = inpw(REG_CLK_DIVCTL0);
;;;570            switch (reg & 0x18) {
;;;571        case 0x0:
;;;572                src = 12;   /* HXT */
;;;573            break;
;;;574        case 0x10:
;;;575                src = sysGetPLL(REG_CLK_APLLCON);
;;;576                break;
;;;577            case 0x18:
;;;578                    src = sysGetPLL(REG_CLK_UPLLCON);
;;;579                break;
;;;580            default:
;;;581                    return 0;
;;;582            }
;;;583        divS = (reg & 0x7) + 1;
;;;584               divN = ((reg & 0xf00) >> 8) + 1;
;;;585               div = ((reg & 0xf000000) >> 24) + 1;
;;;586               return (src / divS / divN / 2 / div);
;;;587        }
;;;588        case SYS_CPU: {
;;;589                reg = inpw(REG_CLK_DIVCTL0);
;;;590            switch (reg & 0x18) {
;;;591        case 0x0:
;;;592                src = 12;   /* HXT */
;;;593            break;
;;;594        case 0x10:
;;;595                src = sysGetPLL(REG_CLK_APLLCON);
;;;596                break;
;;;597            case 0x18:
;;;598                    src = sysGetPLL(REG_CLK_UPLLCON);
;;;599                break;
;;;600            default:
;;;601                    return 0;
;;;602            }
;;;603        divS = (reg & 0x7) + 1;
;;;604               divN = ((reg & 0xf00) >> 8) + 1;
;;;605               div = ((reg & 0xf0000) >> 16) + 1;
;;;606               return (src / divS / divN / div);
;;;607        }
;;;608    
;;;609        default:
;;;610                ;
;;;611        }
;;;612        return 0;
000074  e3a00000          MOV      r0,#0
;;;613    }
000078  e8bd8070          POP      {r4-r6,pc}
                  |L5.124|
00007c  ebfffffe          BL       sysGetPLL
                  |L5.128|
000080  e2041007          AND      r1,r4,#7              ;522
000084  e1a02a04          LSL      r2,r4,#20             ;523
000088  e0854e22          ADD      r4,r5,r2,LSR #28      ;523
00008c  e2811001          ADD      r1,r1,#1              ;523
000090  ea000044          B        |L5.424|
                  |L5.148|
000094  e5914220          LDR      r4,[r1,#0x220]        ;528
000098  e2141018          ANDS     r1,r4,#0x18           ;529
00009c  03a0000c          MOVEQ    r0,#0xc               ;531
0000a0  0a000004          BEQ      |L5.184|
0000a4  e3510010          CMP      r1,#0x10              ;529
0000a8  01a00002          MOVEQ    r0,r2                 ;534
0000ac  13510018          CMPNE    r1,#0x18              ;529
0000b0  1affffef          BNE      |L5.116|
0000b4  ebfffffe          BL       sysGetPLL
                  |L5.184|
0000b8  e2041007          AND      r1,r4,#7              ;542
0000bc  e1a02a04          LSL      r2,r4,#20             ;543
0000c0  e0854e22          ADD      r4,r5,r2,LSR #28      ;543
0000c4  e2811001          ADD      r1,r1,#1              ;543
0000c8  ebfffffe          BL       __aeabi_uidivmod
0000cc  e1a01004          MOV      r1,r4                 ;544
0000d0  ebfffffe          BL       __aeabi_uidivmod
0000d4  e1a000a0          LSR      r0,r0,#1              ;544
0000d8  e8bd8070          POP      {r4-r6,pc}
                  |L5.220|
0000dc  e5914220          LDR      r4,[r1,#0x220]        ;548
0000e0  e2141018          ANDS     r1,r4,#0x18           ;549
0000e4  03a0000c          MOVEQ    r0,#0xc               ;551
0000e8  0a000004          BEQ      |L5.256|
0000ec  e3510010          CMP      r1,#0x10              ;549
0000f0  01a00002          MOVEQ    r0,r2                 ;554
0000f4  13510018          CMPNE    r1,#0x18              ;549
0000f8  1affffdd          BNE      |L5.116|
0000fc  ebfffffe          BL       sysGetPLL
                  |L5.256|
000100  e1a02a04          LSL      r2,r4,#20             ;563
000104  e0856e22          ADD      r6,r5,r2,LSR #28      ;563
000108  e2041007          AND      r1,r4,#7              ;562
00010c  e1a02404          LSL      r2,r4,#8              ;564
000110  ea00000c          B        |L5.328|
                  |L5.276|
000114  e5914220          LDR      r4,[r1,#0x220]        ;569
000118  e2141018          ANDS     r1,r4,#0x18           ;570
00011c  03a0000c          MOVEQ    r0,#0xc               ;572
000120  0a000004          BEQ      |L5.312|
000124  e3510010          CMP      r1,#0x10              ;570
000128  01a00002          MOVEQ    r0,r2                 ;575
00012c  13510018          CMPNE    r1,#0x18              ;570
000130  1affffcf          BNE      |L5.116|
000134  ebfffffe          BL       sysGetPLL
                  |L5.312|
000138  e1a02a04          LSL      r2,r4,#20             ;584
00013c  e0856e22          ADD      r6,r5,r2,LSR #28      ;584
000140  e2041007          AND      r1,r4,#7              ;583
000144  e1a02204          LSL      r2,r4,#4              ;585
                  |L5.328|
000148  e0854e22          ADD      r4,r5,r2,LSR #28      ;564
00014c  e2811001          ADD      r1,r1,#1              ;564
000150  ebfffffe          BL       __aeabi_uidivmod
000154  e1a01006          MOV      r1,r6                 ;565
000158  ebfffffe          BL       __aeabi_uidivmod
00015c  e1a000a0          LSR      r0,r0,#1              ;565
000160  ea000011          B        |L5.428|
                  |L5.356|
000164  e5914220          LDR      r4,[r1,#0x220]        ;589
000168  e2141018          ANDS     r1,r4,#0x18           ;590
00016c  03a0000c          MOVEQ    r0,#0xc               ;592
000170  0a000004          BEQ      |L5.392|
000174  e3510010          CMP      r1,#0x10              ;590
000178  01a00002          MOVEQ    r0,r2                 ;595
00017c  13510018          CMPNE    r1,#0x18              ;590
000180  1affffbb          BNE      |L5.116|
000184  ebfffffe          BL       sysGetPLL
                  |L5.392|
000188  e1a02a04          LSL      r2,r4,#20             ;604
00018c  e2041007          AND      r1,r4,#7              ;603
000190  e0856e22          ADD      r6,r5,r2,LSR #28      ;604
000194  e1a02604          LSL      r2,r4,#12             ;605
000198  e0854e22          ADD      r4,r5,r2,LSR #28      ;605
00019c  e2811001          ADD      r1,r1,#1              ;605
0001a0  ebfffffe          BL       __aeabi_uidivmod
0001a4  e1a01006          MOV      r1,r6                 ;606
                  |L5.424|
0001a8  ebfffffe          BL       __aeabi_uidivmod
                  |L5.428|
0001ac  e1a01004          MOV      r1,r4                 ;606
0001b0  ebfffffe          BL       __aeabi_uidivmod
0001b4  e8bd8070          POP      {r4-r6,pc}
;;;614    
                          ENDP

                  |L5.440|
                          DCD      0xb0000264

                          AREA ||i.sysGetIBitState||, CODE, READONLY, ALIGN=2

                  sysGetIBitState PROC
;;;462    /// @cond HIDDEN_SYMBOLS
;;;463    BOOL sysGetIBitState()
000000  e10f0000          MRS      r0,APSR ; formerly CPSR
;;;464    {
;;;465        INT32 temp;
;;;466    
;;;467        __asm {
;;;468            MRS temp, CPSR
;;;469        }
;;;470    
;;;471        if (temp & 0x80)
000004  e3100080          TST      r0,#0x80
;;;472            return FALSE;
000008  13a00000          MOVNE    r0,#0
;;;473        else
;;;474            return TRUE;
00000c  03a00001          MOVEQ    r0,#1
;;;475    }
000010  e12fff1e          BX       lr
;;;476    
                          ENDP


                          AREA ||i.sysGetInterruptEnableStatus||, CODE, READONLY, ALIGN=2

                  sysGetInterruptEnableStatus PROC
;;;450    
;;;451    UINT32  sysGetInterruptEnableStatus(void)
000000  e59f0004          LDR      r0,|L7.12|
;;;452    {
;;;453        return (inpw(REG_AIC_IMR));
000004  e5900128          LDR      r0,[r0,#0x128]
;;;454    }
000008  e12fff1e          BX       lr
;;;455    
                          ENDP

                  |L7.12|
                          DCD      0xb8002000

                          AREA ||i.sysGetInterruptEnableStatusH||, CODE, READONLY, ALIGN=2

                  sysGetInterruptEnableStatusH PROC
;;;456    
;;;457    UINT32  sysGetInterruptEnableStatusH(void)
000000  e59f0004          LDR      r0,|L8.12|
;;;458    {
;;;459        return (inpw(REG_AIC_IMRH));
000004  e590012c          LDR      r0,[r0,#0x12c]
;;;460    }
000008  e12fff1e          BX       lr
;;;461    
                          ENDP

                  |L8.12|
                          DCD      0xb8002000

                          AREA ||i.sysGetPLL||, CODE, READONLY, ALIGN=2

                  sysGetPLL PROC
;;;476    
;;;477    INT32 sysGetPLL(UINT32 reg)
000000  e92d4010          PUSH     {r4,lr}
;;;478    {
;;;479        UINT32 N,M,P;
;;;480    
;;;481        N =((inpw(reg) & 0x007F)>>0)+1;
000004  e5901000          LDR      r1,[r0,#0]
000008  e201107f          AND      r1,r1,#0x7f
00000c  e2812001          ADD      r2,r1,#1
;;;482        M =((inpw(reg) & 0x1F80)>>7)+1;
000010  e5901000          LDR      r1,[r0,#0]
;;;483        P =((inpw(reg) & 0xE000)>>13)+1;
000014  e5900000          LDR      r0,[r0,#0]
000018  e2011d7e          AND      r1,r1,#0x1f80         ;482
00001c  e3a03001          MOV      r3,#1                 ;482
000020  e08313a1          ADD      r1,r3,r1,LSR #7       ;482
000024  e2000a0e          AND      r0,r0,#0xe000
000028  e08306a0          ADD      r0,r3,r0,LSR #13
;;;484    
;;;485        return (12*N/(M*P));    /* 12MHz HXT */
00002c  e1610081          SMULBB   r1,r1,r0
000030  e0820082          ADD      r0,r2,r2,LSL #1
000034  e1a00100          LSL      r0,r0,#2
000038  ebfffffe          BL       __aeabi_uidivmod
;;;486    }
00003c  e8bd8010          POP      {r4,pc}
;;;487    /// @endcond HIDDEN_SYMBOLS
                          ENDP


                          AREA ||i.sysInitializeAIC||, CODE, READONLY, ALIGN=2

                  sysInitializeAIC PROC
;;;187    
;;;188    void sysInitializeAIC()
000000  e59f1010          LDR      r1,|L10.24|
;;;189    {
;;;190        *(unsigned int volatile *)0x38 = (unsigned int)sysIrqHandler;
000004  e3a00000          MOV      r0,#0
000008  e5801038          STR      r1,[r0,#0x38]
;;;191    
;;;192        *(unsigned int volatile *)0x3C = (unsigned int)sysFiqHandler;
00000c  e59f1008          LDR      r1,|L10.28|
000010  e580103c          STR      r1,[r0,#0x3c]
;;;193    }
000014  e12fff1e          BX       lr
;;;194    /// @endcond HIDDEN_SYMBOLS
                          ENDP

                  |L10.24|
                          DCD      sysIrqHandler
                  |L10.28|
                          DCD      sysFiqHandler

                          AREA ||i.sysInstallExceptionHandler||, CODE, READONLY, ALIGN=2

                  sysInstallExceptionHandler PROC
;;;247     */
;;;248    PVOID sysInstallExceptionHandler(INT32 nExceptType, PVOID pvNewHandler)
000000  e1b02000          MOVS     r2,r0
;;;249    {
;;;250        PVOID _mOldVect = NULL;
000004  e3a00000          MOV      r0,#0
000008  e1a03000          MOV      r3,r0
;;;251    
;;;252        switch (nExceptType) {
;;;253        case SYS_SWI:
;;;254            _mOldVect = *(PVOID volatile *)0x28;
00000c  05930028          LDREQ    r0,[r3,#0x28]
;;;255            *(PVOID volatile *)0x28 = pvNewHandler;
000010  05831028          STREQ    r1,[r3,#0x28]
;;;256            break;
;;;257    
;;;258        case SYS_D_ABORT:
;;;259            _mOldVect = *(PVOID volatile *)0x30;
;;;260            *(PVOID volatile *)0x30 = pvNewHandler;
;;;261            break;
;;;262    
;;;263        case SYS_I_ABORT:
;;;264            _mOldVect = *(PVOID volatile *)0x2C;
;;;265            *(PVOID volatile *)0x2C = pvNewHandler;
;;;266            break;
;;;267    
;;;268        case SYS_UNDEFINE:
;;;269            _mOldVect = *(PVOID volatile *)0x24;
;;;270            *(PVOID volatile *)0x24 = pvNewHandler;
;;;271            break;
;;;272    
;;;273        default:
;;;274            ;
;;;275        }
;;;276        return _mOldVect;
;;;277    }
000014  012fff1e          BXEQ     lr
000018  e3520001          CMP      r2,#1                 ;252
00001c  05930030          LDREQ    r0,[r3,#0x30]         ;259
000020  05831030          STREQ    r1,[r3,#0x30]         ;260
000024  012fff1e          BXEQ     lr
000028  e3520002          CMP      r2,#2                 ;252
00002c  0593002c          LDREQ    r0,[r3,#0x2c]         ;264
000030  0583102c          STREQ    r1,[r3,#0x2c]         ;265
000034  012fff1e          BXEQ     lr
000038  e3520003          CMP      r2,#3                 ;252
00003c  05930024          LDREQ    r0,[r3,#0x24]         ;269
000040  05831024          STREQ    r1,[r3,#0x24]         ;270
000044  e12fff1e          BX       lr
;;;278    
                          ENDP


                          AREA ||i.sysInstallFiqHandler||, CODE, READONLY, ALIGN=2

                  sysInstallFiqHandler PROC
;;;285     */
;;;286    PVOID sysInstallFiqHandler(PVOID pvNewISR)
000000  e1a01000          MOV      r1,r0
;;;287    {
;;;288        PVOID _mOldVect;
;;;289    
;;;290        _mOldVect = *(PVOID volatile *)0x3C;
000004  e3a02000          MOV      r2,#0
000008  e592003c          LDR      r0,[r2,#0x3c]
;;;291        *(PVOID volatile *)0x3C = pvNewISR;
00000c  e582103c          STR      r1,[r2,#0x3c]
;;;292        return _mOldVect;
;;;293    }
000010  e12fff1e          BX       lr
;;;294    
                          ENDP


                          AREA ||i.sysInstallISR||, CODE, READONLY, ALIGN=2

                  sysInstallISR PROC
;;;321     */
;;;322    PVOID sysInstallISR(INT32 nIntTypeLevel, IRQn_Type eIntNo, PVOID pvNewISR)
000000  e92d4030          PUSH     {r4,r5,lr}
;;;323    {
;;;324        PVOID   _mOldVect;
;;;325        UINT32  _mRegAddr/*, _mRegValue*/;
;;;326        INT     shift;
;;;327    
;;;328        if (!_sys_bIsAICInitial) {
000004  e59f5060          LDR      r5,|L13.108|
000008  e1a04000          MOV      r4,r0                 ;323
00000c  e5d50000          LDRB     r0,[r5,#0]  ; _sys_bIsAICInitial
000010  e1a03001          MOV      r3,r1                 ;323
000014  e3500000          CMP      r0,#0
000018  1a000002          BNE      |L13.40|
;;;329            sysInitializeAIC();
00001c  ebfffffe          BL       sysInitializeAIC
;;;330            _sys_bIsAICInitial = TRUE;
000020  e3a00001          MOV      r0,#1
000024  e5c50000          STRB     r0,[r5,#0]  ; _sys_bIsAICInitial
                  |L13.40|
;;;331        }
;;;332    
;;;333        _mRegAddr = REG_AIC_SCR1 + ((eIntNo / 4) * 4);
000028  e59f1040          LDR      r1,|L13.112|
00002c  e3c30003          BIC      r0,r3,#3
000030  e080c001          ADD      r12,r0,r1
;;;334        shift = (eIntNo % 4) * 8;
000034  e1a00f03          LSL      r0,r3,#30
000038  e1a01da0          LSR      r1,r0,#27
;;;335        nIntTypeLevel &= 0xff;
00003c  e20400ff          AND      r0,r4,#0xff
;;;336        outpw(_mRegAddr, (inpw(_mRegAddr) & ~(0x07 << shift)) | (nIntTypeLevel << shift));
000040  e59c4000          LDR      r4,[r12,#0]
000044  e3a05007          MOV      r5,#7
000048  e1c44115          BIC      r4,r4,r5,LSL r1
00004c  e1841110          ORR      r1,r4,r0,LSL r1
000050  e58c1000          STR      r1,[r12,#0]
;;;337    
;;;338        if ((nIntTypeLevel & 0x7) == FIQ_LEVEL_0) {
000054  e3100007          TST      r0,#7
;;;339            _mOldVect = (PVOID) sysFiqHandlerTable[eIntNo];
000058  059f1014          LDREQ    r1,|L13.116|
;;;340            sysFiqHandlerTable[eIntNo] = (sys_pvFunPtr)pvNewISR;
;;;341        } else {
;;;342            _mOldVect = (PVOID) sysIrqHandlerTable[eIntNo];
00005c  159f1014          LDRNE    r1,|L13.120|
000060  e7910103          LDR      r0,[r1,r3,LSL #2]     ;339
000064  e7812103          STR      r2,[r1,r3,LSL #2]     ;340
;;;343            sysIrqHandlerTable[eIntNo] = (sys_pvFunPtr)pvNewISR;
;;;344        }
;;;345        return _mOldVect;
;;;346    }
000068  e8bd8030          POP      {r4,r5,pc}
;;;347    
                          ENDP

                  |L13.108|
                          DCD      ||.data||
                  |L13.112|
                          DCD      0xb8002000
                  |L13.116|
                          DCD      ||.data||+0xfc
                  |L13.120|
                          DCD      ||.data||+0x4

                          AREA ||i.sysInstallIrqHandler||, CODE, READONLY, ALIGN=2

                  sysInstallIrqHandler PROC
;;;301     */
;;;302    PVOID sysInstallIrqHandler(PVOID pvNewISR)
000000  e1a01000          MOV      r1,r0
;;;303    {
;;;304        PVOID _mOldVect;
;;;305    
;;;306        _mOldVect = *(PVOID volatile *)0x38;
000004  e3a02000          MOV      r2,#0
000008  e5920038          LDR      r0,[r2,#0x38]
;;;307        *(PVOID volatile *)0x38 = pvNewISR;
00000c  e5821038          STR      r1,[r2,#0x38]
;;;308        return _mOldVect;
;;;309    }
000010  e12fff1e          BX       lr
;;;310    
                          ENDP


                          AREA ||i.sysIrqHandler||, CODE, READONLY, ALIGN=2

                  sysIrqHandler PROC
;;;157    /* Interrupt Handler */
;;;158    __irq void sysIrqHandler()
000000  e92d501f          PUSH     {r0-r4,r12,lr}
;;;159    {
;;;160        UINT32 volatile _mIPER, _mISNR;
;;;161    
;;;162        _mIPER = (inpw(REG_AIC_IPER) >> 2) & 0x3f;
000004  e59f4048          LDR      r4,|L15.84|
000008  e24dd00c          SUB      sp,sp,#0xc            ;159
00000c  e5940118          LDR      r0,[r4,#0x118]
000010  e1a00c00          LSL      r0,r0,#24
000014  e1a00d20          LSR      r0,r0,#26
;;;163        _mISNR = inpw(REG_AIC_ISNR);
000018  e58d0000          STR      r0,[sp,#0]
00001c  e5940120          LDR      r0,[r4,#0x120]
;;;164        if (_mISNR != 0)
000020  e3500000          CMP      r0,#0
000024  e58d0004          STR      r0,[sp,#4]            ;163
000028  0a000004          BEQ      |L15.64|
00002c  e1cd00d0          LDRD     r0,r1,[sp,#0]         ;159
;;;165            if (_mIPER == _mISNR)
000030  e1500001          CMP      r0,r1
;;;166                (*sysIrqHandlerTable[_mISNR])();
000034  059f001c          LDREQ    r0,|L15.88|
000038  07900101          LDREQ    r0,[r0,r1,LSL #2]
00003c  012fff30          BLXEQ    r0
                  |L15.64|
;;;167        outpw(REG_AIC_EOSCR, 1);
000040  e3a00001          MOV      r0,#1
000044  e5840150          STR      r0,[r4,#0x150]
;;;168    }
000048  e28dd00c          ADD      sp,sp,#0xc
00004c  e8bd501f          POP      {r0-r4,r12,lr}
000050  e25ef004          SUBS     pc,lr,#4
;;;169    
                          ENDP

                  |L15.84|
                          DCD      0xb8002000
                  |L15.88|
                          DCD      ||.data||+0x4

                          AREA ||i.sysSetGlobalInterrupt||, CODE, READONLY, ALIGN=2

                  sysSetGlobalInterrupt PROC
;;;348    
;;;349    INT32 sysSetGlobalInterrupt(INT32 nIntState)
000000  e59f2024          LDR      r2,|L16.44|
;;;350    {
;;;351        switch (nIntState) {
000004  e3500000          CMP      r0,#0
;;;352        case ENABLE_ALL_INTERRUPTS:
;;;353            outpw(REG_AIC_MECR, 0xFFFFFFFF);
000008  e3e01000          MVN      r1,#0
00000c  05821130          STREQ    r1,[r2,#0x130]
;;;354            outpw(REG_AIC_MECRH, 0xFFFFFFFF);
000010  05821134          STREQ    r1,[r2,#0x134]
000014  0a000002          BEQ      |L16.36|
000018  e3500001          CMP      r0,#1                 ;351
;;;355            break;
;;;356    
;;;357        case DISABLE_ALL_INTERRUPTS:
;;;358            outpw(REG_AIC_MDCR, 0xFFFFFFFF);
00001c  05821138          STREQ    r1,[r2,#0x138]
;;;359            outpw(REG_AIC_MDCRH, 0xFFFFFFFF);
000020  0582113c          STREQ    r1,[r2,#0x13c]
                  |L16.36|
;;;360            break;
;;;361    
;;;362        default:
;;;363            ;
;;;364        }
;;;365        return 0;
000024  e3a00000          MOV      r0,#0
;;;366    }
000028  e12fff1e          BX       lr
;;;367    
                          ENDP

                  |L16.44|
                          DCD      0xb8002000

                          AREA ||i.sysSetInterruptPriorityLevel||, CODE, READONLY, ALIGN=2

                  sysSetInterruptPriorityLevel PROC
;;;377     */
;;;378    INT32 sysSetInterruptPriorityLevel(IRQn_Type eIntNo, UINT32 uIntLevel)
000000  e2402001          SUB      r2,r0,#1
;;;379    {
;;;380        UINT32  _mRegAddr;
;;;381        INT     shift;
;;;382    
;;;383        if ((eIntNo > SYS_MAX_INT_SOURCE) || (eIntNo < SYS_MIN_INT_SOURCE))
000004  e352003e          CMP      r2,#0x3e
;;;384            return 1;
000008  23a00001          MOVCS    r0,#1
;;;385    
;;;386        _mRegAddr = REG_AIC_SCR1 + ((eIntNo / 4) * 4);
;;;387        shift = (eIntNo % 4) * 8;
;;;388        uIntLevel &= 0x7;
;;;389        outpw(_mRegAddr, (inpw(_mRegAddr) & ~(0x07 << shift)) | (uIntLevel << shift));
;;;390    
;;;391        return 0;
;;;392    }
00000c  212fff1e          BXCS     lr
000010  e3c02003          BIC      r2,r0,#3              ;386
000014  e1a00f00          LSL      r0,r0,#30             ;387
000018  e1a00da0          LSR      r0,r0,#27             ;387
00001c  e59f301c          LDR      r3,|L17.64|
000020  e2011007          AND      r1,r1,#7              ;388
000024  e7b23003          LDR      r3,[r2,r3]!           ;389
000028  e3a0c007          MOV      r12,#7                ;389
00002c  e1c3301c          BIC      r3,r3,r12,LSL r0      ;389
000030  e1830011          ORR      r0,r3,r1,LSL r0       ;389
000034  e5820000          STR      r0,[r2,#0]            ;389
000038  e3a00000          MOV      r0,#0                 ;391
00003c  e12fff1e          BX       lr
;;;393    
                          ENDP

                  |L17.64|
                          DCD      0xb8002000

                          AREA ||i.sysSetInterruptType||, CODE, READONLY, ALIGN=2

                  sysSetInterruptType PROC
;;;394    
;;;395    INT32 sysSetInterruptType(IRQn_Type eIntNo, UINT32 uIntSourceType)
000000  e2402001          SUB      r2,r0,#1
;;;396    {
;;;397        UINT32 _mRegAddr;
;;;398        INT     shift;
;;;399    
;;;400        if ((eIntNo > SYS_MAX_INT_SOURCE) || (eIntNo < SYS_MIN_INT_SOURCE))
000004  e352003e          CMP      r2,#0x3e
;;;401            return 1;
000008  23a00001          MOVCS    r0,#1
;;;402    
;;;403        _mRegAddr = REG_AIC_SCR1 + ((eIntNo / 4) * 4);
;;;404        shift = (eIntNo % 4) * 8;
;;;405        uIntSourceType &= 0xC0;
;;;406        outpw(_mRegAddr, (inpw(_mRegAddr) & ~(0xC0 << shift)) | (uIntSourceType << shift));
;;;407    
;;;408        return 0;
;;;409    }
00000c  212fff1e          BXCS     lr
000010  e3c02003          BIC      r2,r0,#3              ;403
000014  e1a00f00          LSL      r0,r0,#30             ;404
000018  e1a00da0          LSR      r0,r0,#27             ;404
00001c  e59f301c          LDR      r3,|L18.64|
000020  e20110c0          AND      r1,r1,#0xc0           ;405
000024  e7b23003          LDR      r3,[r2,r3]!           ;406
000028  e3a0c0c0          MOV      r12,#0xc0             ;406
00002c  e1c3301c          BIC      r3,r3,r12,LSL r0      ;406
000030  e1830011          ORR      r0,r3,r1,LSL r0       ;406
000034  e5820000          STR      r0,[r2,#0]            ;406
000038  e3a00000          MOV      r0,#0                 ;408
00003c  e12fff1e          BX       lr
;;;410    
                          ENDP

                  |L18.64|
                          DCD      0xb8002000

                          AREA ||i.sysSetLocalInterrupt||, CODE, READONLY, ALIGN=2

                  sysSetLocalInterrupt PROC
;;;419     */
;;;420    INT32 sysSetLocalInterrupt(INT32 nIntState)
000000  e3500080          CMP      r0,#0x80
;;;421    {
;;;422        INT32 temp;
;;;423    
;;;424        switch (nIntState) {
000004  0a000010          BEQ      |L19.76|
000008  ca000006          BGT      |L19.40|
00000c  e350003f          CMP      r0,#0x3f
000010  0a000009          BEQ      |L19.60|
000014  e3500040          CMP      r0,#0x40
000018  0a00000b          BEQ      |L19.76|
00001c  e350007f          CMP      r0,#0x7f
000020  0a000005          BEQ      |L19.60|
000024  ea00000b          B        |L19.88|
                  |L19.40|
000028  e35000bf          CMP      r0,#0xbf
00002c  0a000002          BEQ      |L19.60|
000030  e35000c0          CMP      r0,#0xc0
000034  0a000004          BEQ      |L19.76|
000038  ea000006          B        |L19.88|
                  |L19.60|
;;;425        case ENABLE_IRQ:
;;;426        case ENABLE_FIQ:
;;;427        case ENABLE_FIQ_IRQ:
;;;428            __asm {
;;;429                MRS    temp, CPSR
00003c  e10f1000          MRS      r1,APSR ; formerly CPSR
;;;430                AND    temp, temp, nIntState
000040  e0010000          AND      r0,r1,r0
;;;431                MSR    CPSR_c, temp
000044  e121f000          MSR      CPSR_c,r0
;;;432            }
;;;433            break;
000048  ea000002          B        |L19.88|
                  |L19.76|
;;;434    
;;;435        case DISABLE_IRQ:
;;;436            case DISABLE_FIQ:
;;;437                case DISABLE_FIQ_IRQ:
;;;438                        __asm {
;;;439                        MRS    temp, CPSR
00004c  e10f1000          MRS      r1,APSR ; formerly CPSR
;;;440                        ORR    temp, temp, nIntState
000050  e1810000          ORR      r0,r1,r0
;;;441                        MSR    CPSR_c, temp
000054  e121f000          MSR      CPSR_c,r0
                  |L19.88|
;;;442                    }
;;;443            break;
;;;444    
;;;445        default:
;;;446                ;
;;;447        }
;;;448        return 0;
000058  e3a00000          MOV      r0,#0
;;;449    }
00005c  e12fff1e          BX       lr
;;;450    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  _sys_bIsAICInitial
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  sysIrqHandlerTable
                          DCD      0x00000000
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                  sysFiqHandlerTable
                          DCD      0x00000000
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
