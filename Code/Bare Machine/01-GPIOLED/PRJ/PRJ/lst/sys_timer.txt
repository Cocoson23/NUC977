; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\sys_timer.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sys_timer.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931 -I..\..\Driver\Include -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\Toshiba -D__UVISION_VERSION=524 --omf_browse=.\obj\sys_timer.crf ..\..\Driver\Source\sys_timer.c]
                          ARM

                          AREA ||i.sysClearTimerEvent||, CODE, READONLY, ALIGN=2

                  sysClearTimerEvent PROC
;;;505     */
;;;506    void sysClearTimerEvent(INT32 nTimeNo, UINT32 uTimeEventNo)
000000  e59f2060          LDR      r2,|L1.104|
;;;507    {
;;;508        switch (nTimeNo) {
000004  e3500000          CMP      r0,#0
000008  e3a03000          MOV      r3,#0                 ;507
00000c  0a00000b          BEQ      |L1.64|
000010  e3500001          CMP      r0,#1
;;;509        case TIMER0:
;;;510            tTime0Event[uTimeEventNo-1].active = FALSE;
;;;511            _sys_uTime0EventCount--;
;;;512            if (_sys_uTime0EventCount == 0)
;;;513                _sys_bIsSetTime0Event = FALSE;
;;;514            break;
;;;515    
;;;516        case TIMER1:
;;;517            tTime1Event[uTimeEventNo-1].active = FALSE;
;;;518            _sys_uTime1EventCount--;
;;;519            if (_sys_uTime1EventCount == 0)
;;;520                _sys_bIsSetTime1Event = FALSE;
;;;521            break;
;;;522    
;;;523        default:
;;;524            ;
;;;525        }
;;;526    }
000014  112fff1e          BXNE     lr
000018  e59f004c          LDR      r0,|L1.108|
00001c  e0800201          ADD      r0,r0,r1,LSL #4       ;517
000020  e5003010          STR      r3,[r0,#-0x10]        ;518
000024  e5920018          LDR      r0,[r2,#0x18]         ;518  ; _sys_uTime1EventCount
000028  e2400001          SUB      r0,r0,#1              ;518
00002c  e5820018          STR      r0,[r2,#0x18]         ;518  ; _sys_uTime1EventCount
000030  e5920018          LDR      r0,[r2,#0x18]         ;519  ; _sys_uTime1EventCount
000034  e3500000          CMP      r0,#0                 ;519
000038  05c23001          STRBEQ   r3,[r2,#1]            ;520  ; _sys_bIsSetTime1Event
00003c  e12fff1e          BX       lr
                  |L1.64|
000040  e59f0028          LDR      r0,|L1.112|
000044  e0800201          ADD      r0,r0,r1,LSL #4       ;510
000048  e5003010          STR      r3,[r0,#-0x10]        ;511
00004c  e5920014          LDR      r0,[r2,#0x14]         ;511  ; _sys_uTime0EventCount
000050  e2400001          SUB      r0,r0,#1              ;511
000054  e5820014          STR      r0,[r2,#0x14]         ;511  ; _sys_uTime0EventCount
000058  e5920014          LDR      r0,[r2,#0x14]         ;512  ; _sys_uTime0EventCount
00005c  e3500000          CMP      r0,#0                 ;512
000060  05c23000          STRBEQ   r3,[r2,#0]            ;513  ; _sys_bIsSetTime0Event
000064  e12fff1e          BX       lr
;;;527    
                          ENDP

                  |L1.104|
                          DCD      ||.data||
                  |L1.108|
                          DCD      ||.bss||+0xa0
                  |L1.112|
                          DCD      ||.bss||

                          AREA ||i.sysClearWatchDogTimerCount||, CODE, READONLY, ALIGN=2

                  sysClearWatchDogTimerCount PROC
;;;324     */
;;;325    void sysClearWatchDogTimerCount(void)
000000  e59f0014          LDR      r0,|L2.28|
;;;326    {
000004  e92d4008          PUSH     {r3,lr}
;;;327        UINT32 volatile _mWtcr;
;;;328    
;;;329        _mWtcr = inpw(REG_WDT_CTL);
000008  e5901000          LDR      r1,[r0,#0]
;;;330        _mWtcr |= 0x01;             /* write WTR */
00000c  e3811001          ORR      r1,r1,#1
;;;331        outpw(REG_WDT_CTL, _mWtcr);
000010  e58d1000          STR      r1,[sp,#0]
000014  e5801000          STR      r1,[r0,#0]
;;;332    }
000018  e8bd8008          POP      {r3,pc}
;;;333    
                          ENDP

                  |L2.28|
                          DCD      0xb8001800

                          AREA ||i.sysClearWatchDogTimerInterruptStatus||, CODE, READONLY, ALIGN=2

                  sysClearWatchDogTimerInterruptStatus PROC
;;;338     */
;;;339    void sysClearWatchDogTimerInterruptStatus(void)
000000  e59f0014          LDR      r0,|L3.28|
;;;340    {
000004  e92d4008          PUSH     {r3,lr}
;;;341        UINT32 volatile _mWtcr;
;;;342    
;;;343        _mWtcr = inpw(REG_WDT_CTL);
000008  e5901000          LDR      r1,[r0,#0]
;;;344        _mWtcr |= 0x08;       /* clear WTIF */
00000c  e3811008          ORR      r1,r1,#8
;;;345        outpw(REG_WDT_CTL, _mWtcr);
000010  e58d1000          STR      r1,[sp,#0]
000014  e5801000          STR      r1,[r0,#0]
;;;346    }
000018  e8bd8008          POP      {r3,pc}
;;;347    
                          ENDP

                  |L3.28|
                          DCD      0xb8001800

                          AREA ||i.sysDOS_Time_To_UTC||, CODE, READONLY, ALIGN=2

                  sysDOS_Time_To_UTC PROC
;;;537    
;;;538    UINT32 sysDOS_Time_To_UTC(DateTime_T ltime)
000000  e92d40f0          PUSH     {r4-r7,lr}
;;;539    {
;;;540        int     i, leap_year_cnt;
;;;541        UINT32  utc;
;;;542    
;;;543        if ((ltime.mon < 1) || (ltime.mon > 12) || (ltime.day < 1) || (ltime.day > 31) ||
000004  e59d5014          LDR      r5,[sp,#0x14]
000008  e59d6018          LDR      r6,[sp,#0x18]
00000c  e2414001          SUB      r4,r1,#1
000010  e354000c          CMP      r4,#0xc
000014  2a000007          BCS      |L4.56|
000018  e3520000          CMP      r2,#0
00001c  0a000005          BEQ      |L4.56|
000020  e352001f          CMP      r2,#0x1f
;;;544                (ltime.hour > 23) || (ltime.min > 59) || (ltime.sec > 59)) {
000024  93530017          CMPLS    r3,#0x17
000028  8a000002          BHI      |L4.56|
00002c  e355003b          CMP      r5,#0x3b
000030  9356003b          CMPLS    r6,#0x3b
000034  9a000001          BLS      |L4.64|
                  |L4.56|
;;;545            //_debug_msg("DOS_Time_To_UTC - illegal time!! %d-%d-%d %d:%d:%d\n", year, month, day, hour, minute, second);
;;;546            return 1;
000038  e3a00001          MOV      r0,#1
;;;547        }
;;;548    
;;;549        ltime.year = ltime.year - 1970;     /* DOS is 1980 started, UTC is 1970 started */
;;;550    
;;;551        leap_year_cnt = (ltime.year + 1) / 4;
;;;552    
;;;553        utc = ltime.year * SECONDS_365_DAY + leap_year_cnt * SECONDS_PER_DAY;
;;;554    
;;;555        if ((ltime.year + 2) % 4 == 0)
;;;556            month_seconds[1] = 29 * SECONDS_PER_DAY;    /* leap year */
;;;557        else
;;;558            month_seconds[1] = 28 * SECONDS_PER_DAY;    /* non-leap year */
;;;559    
;;;560        for (i = 0; i < ltime.mon - 1; i++)
;;;561            utc += month_seconds[i];
;;;562    
;;;563        utc += (ltime.day - 1) * SECONDS_PER_DAY;
;;;564    
;;;565        utc += ltime.hour * SECONDS_PER_HOUR + ltime.min * 60 + ltime.sec;
;;;566    
;;;567        return utc;
;;;568    }
00003c  e8bd80f0          POP      {r4-r7,pc}
                  |L4.64|
000040  e2400c07          SUB      r0,r0,#0x700          ;546
000044  e24000b2          SUB      r0,r0,#0xb2           ;546
000048  e59fc074          LDR      r12,|L4.196|
00004c  e2801001          ADD      r1,r0,#1              ;551
000050  e00c0c90          MUL      r12,r0,r12            ;553
000054  e59f706c          LDR      r7,|L4.200|
000058  e1a01121          LSR      r1,r1,#2              ;551
00005c  e0010197          MUL      r1,r7,r1              ;553
000060  e2800002          ADD      r0,r0,#2              ;553
000064  e3100003          TST      r0,#3                 ;555
000068  e08c1381          ADD      r1,r12,r1,LSL #7      ;553
00006c  e59fc058          LDR      r12,|L4.204|
000070  059f0058          LDREQ    r0,|L4.208|
000074  159f0058          LDRNE    r0,|L4.212|
000078  e58c0004          STR      r0,[r12,#4]           ;558  ; month_seconds
00007c  e3a00000          MOV      r0,#0                 ;560
                  |L4.128|
000080  e1540000          CMP      r4,r0                 ;560
000084  879c7100          LDRHI    r7,[r12,r0,LSL #2]    ;561
000088  82800001          ADDHI    r0,r0,#1              ;561
00008c  80811007          ADDHI    r1,r1,r7              ;561
000090  8afffffa          BHI      |L4.128|
000094  e59f002c          LDR      r0,|L4.200|
000098  e0000092          MUL      r0,r2,r0              ;563
00009c  e0652205          RSB      r2,r5,r5,LSL #4       ;565
0000a0  e0810380          ADD      r0,r1,r0,LSL #7       ;563
0000a4  e3a01ee1          MOV      r1,#0xe10             ;565
0000a8  e0010193          MUL      r1,r3,r1              ;565
0000ac  e2400905          SUB      r0,r0,#0x14000        ;565
0000b0  e0811102          ADD      r1,r1,r2,LSL #2       ;565
0000b4  e0811006          ADD      r1,r1,r6              ;565
0000b8  e2400d46          SUB      r0,r0,#0x1180         ;565
0000bc  e0800001          ADD      r0,r0,r1              ;565
0000c0  e8bd80f0          POP      {r4-r7,pc}
;;;569    
                          ENDP

                  |L4.196|
                          DCD      0x01e13380
                  |L4.200|
                          DCD      0x000002a3
                  |L4.204|
                          DCD      ||.data||+0x30
                  |L4.208|
                          DCD      0x00263b80
                  |L4.212|
                          DCD      0x0024ea00

                          AREA ||i.sysDelay||, CODE, READONLY, ALIGN=2

                  sysDelay PROC
;;;639     */
;;;640    void sysDelay(UINT32 uTicks)
000000  e92d4038          PUSH     {r3-r5,lr}
;;;641    {
000004  e1a04000          MOV      r4,r0
;;;642        UINT32 volatile btime;
;;;643    
;;;644        if(!_sys_bIsTimer0Initial) {
000008  e59f0040          LDR      r0,|L5.80|
00000c  e5d00002          LDRB     r0,[r0,#2]  ; _sys_bIsTimer0Initial
000010  e3500000          CMP      r0,#0
000014  1a000003          BNE      |L5.40|
;;;645            sysStartTimer(TIMER0, 100, PERIODIC_MODE);
000018  e3a02001          MOV      r2,#1
00001c  e3a01064          MOV      r1,#0x64
000020  e3a00000          MOV      r0,#0
000024  ebfffffe          BL       sysStartTimer
                  |L5.40|
;;;646        }
;;;647    
;;;648        btime = sysGetTicks(TIMER0);
000028  e3a00000          MOV      r0,#0
00002c  ebfffffe          BL       sysGetTicks
000030  e58d0000          STR      r0,[sp,#0]
                  |L5.52|
;;;649        while(1) {
;;;650            if((sysGetTicks(TIMER0) - btime) > uTicks) {
000034  e3a00000          MOV      r0,#0
000038  ebfffffe          BL       sysGetTicks
00003c  e59d1000          LDR      r1,[sp,#0]
000040  e0400001          SUB      r0,r0,r1
000044  e1500004          CMP      r0,r4
000048  9afffff9          BLS      |L5.52|
;;;651                break;
;;;652            }
;;;653        }
;;;654    }
00004c  e8bd8038          POP      {r3-r5,pc}
;;;655    
                          ENDP

                  |L5.80|
                          DCD      ||.data||

                          AREA ||i.sysDisableWatchDogTimer||, CODE, READONLY, ALIGN=2

                  sysDisableWatchDogTimer PROC
;;;352     */
;;;353    void sysDisableWatchDogTimer(void)
000000  e59f0014          LDR      r0,|L6.28|
;;;354    {
000004  e92d4008          PUSH     {r3,lr}
;;;355        UINT32 volatile _mWtcr;
;;;356    
;;;357        _mWtcr = inpw(REG_WDT_CTL);
000008  e5901000          LDR      r1,[r0,#0]
;;;358        _mWtcr &= 0xFFFFFF7F;
00000c  e3c11080          BIC      r1,r1,#0x80
;;;359        outpw(REG_WDT_CTL, _mWtcr);
000010  e58d1000          STR      r1,[sp,#0]
000014  e5801000          STR      r1,[r0,#0]
;;;360    }
000018  e8bd8008          POP      {r3,pc}
;;;361    
                          ENDP

                  |L6.28|
                          DCD      0xb8001800

                          AREA ||i.sysDisableWatchDogTimerReset||, CODE, READONLY, ALIGN=2

                  sysDisableWatchDogTimerReset PROC
;;;366     */
;;;367    void sysDisableWatchDogTimerReset(void)
000000  e59f0014          LDR      r0,|L7.28|
;;;368    {
000004  e92d4008          PUSH     {r3,lr}
;;;369        UINT32 volatile _mWtcr;
;;;370    
;;;371        _mWtcr = inpw(REG_WDT_CTL);
000008  e5901000          LDR      r1,[r0,#0]
;;;372        _mWtcr &= 0xFFFFFFFD;
00000c  e3c11002          BIC      r1,r1,#2
;;;373        outpw(REG_WDT_CTL, _mWtcr);
000010  e58d1000          STR      r1,[sp,#0]
000014  e5801000          STR      r1,[r0,#0]
;;;374    }
000018  e8bd8008          POP      {r3,pc}
;;;375    
                          ENDP

                  |L7.28|
                          DCD      0xb8001800

                          AREA ||i.sysEnableWatchDogTimer||, CODE, READONLY, ALIGN=2

                  sysEnableWatchDogTimer PROC
;;;380     */
;;;381    void sysEnableWatchDogTimer(void)
000000  e59f0014          LDR      r0,|L8.28|
;;;382    {
000004  e92d4008          PUSH     {r3,lr}
;;;383        UINT32 volatile _mWtcr;
;;;384    
;;;385        _mWtcr = inpw(REG_WDT_CTL);
000008  e5901000          LDR      r1,[r0,#0]
;;;386        _mWtcr |= 0x80;
00000c  e3811080          ORR      r1,r1,#0x80
;;;387        outpw(REG_WDT_CTL, _mWtcr);
000010  e58d1000          STR      r1,[sp,#0]
000014  e5801000          STR      r1,[r0,#0]
;;;388    }
000018  e8bd8008          POP      {r3,pc}
;;;389    
                          ENDP

                  |L8.28|
                          DCD      0xb8001800

                          AREA ||i.sysEnableWatchDogTimerReset||, CODE, READONLY, ALIGN=2

                  sysEnableWatchDogTimerReset PROC
;;;394     */
;;;395    void sysEnableWatchDogTimerReset(void)
000000  e59f0014          LDR      r0,|L9.28|
;;;396    {
000004  e92d4008          PUSH     {r3,lr}
;;;397        UINT32 volatile _mWtcr;
;;;398    
;;;399        _mWtcr = inpw(REG_WDT_CTL);
000008  e5901000          LDR      r1,[r0,#0]
;;;400        _mWtcr |= 0x02;
00000c  e3811002          ORR      r1,r1,#2
;;;401        outpw(REG_WDT_CTL, _mWtcr);
000010  e58d1000          STR      r1,[sp,#0]
000014  e5801000          STR      r1,[r0,#0]
;;;402    }
000018  e8bd8008          POP      {r3,pc}
;;;403    
                          ENDP

                  |L9.28|
                          DCD      0xb8001800

                          AREA ||i.sysGetCurrentTime||, CODE, READONLY, ALIGN=2

                  sysGetCurrentTime PROC
;;;620    
;;;621    void sysGetCurrentTime(DateTime_T *curTime)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;622    {
;;;623        UINT32 clock, utc_time;
;;;624    
;;;625        clock = _sys_uTimer0Count;
000004  e59f4028          LDR      r4,|L10.52|
000008  e1a05000          MOV      r5,r0                 ;622
00000c  e594000c          LDR      r0,[r4,#0xc]  ; _sys_uTimer0Count
;;;626        utc_time = _sys_ReferenceTime_UTC + (clock - _sys_ReferenceTime_Clock) / _sys_uTimer0TickPerSecond;
000010  e594101c          LDR      r1,[r4,#0x1c]  ; _sys_ReferenceTime_Clock
000014  e0400001          SUB      r0,r0,r1
000018  e5941028          LDR      r1,[r4,#0x28]  ; _sys_uTimer0TickPerSecond
00001c  ebfffffe          BL       __aeabi_uidivmod
000020  e594102c          LDR      r1,[r4,#0x2c]  ; _sys_ReferenceTime_UTC
000024  e0800001          ADD      r0,r0,r1
;;;627    
;;;628        sysUTC_To_DOS_Time(utc_time, curTime);
000028  e1a01005          MOV      r1,r5
00002c  e8bd4070          POP      {r4-r6,lr}
000030  eafffffe          B        sysUTC_To_DOS_Time
;;;629    }
;;;630    
                          ENDP

                  |L10.52|
                          DCD      ||.data||

                          AREA ||i.sysGetTicks||, CODE, READONLY, ALIGN=2

                  sysGetTicks PROC
;;;128     */
;;;129    UINT32 sysGetTicks(INT32 nTimeNo)
000000  e59f1018          LDR      r1,|L11.32|
;;;130    {
;;;131        switch (nTimeNo) {
000004  e3500000          CMP      r0,#0
;;;132        case TIMER0:
;;;133            return _sys_uTimer0Count;
000008  0591000c          LDREQ    r0,[r1,#0xc]  ; _sys_uTimer0Count
;;;134    
;;;135        case TIMER1:
;;;136            return _sys_uTimer1Count;
;;;137    
;;;138        default:
;;;139            ;
;;;140        }
;;;141        return 0;
;;;142    }
00000c  012fff1e          BXEQ     lr
000010  e3500001          CMP      r0,#1                 ;131
000014  05910010          LDREQ    r0,[r1,#0x10]         ;136  ; _sys_uTimer1Count
000018  13a00000          MOVNE    r0,#0                 ;141
00001c  e12fff1e          BX       lr
;;;143    
                          ENDP

                  |L11.32|
                          DCD      ||.data||

                          AREA ||i.sysInstallWatchDogTimerISR||, CODE, READONLY, ALIGN=2

                  sysInstallWatchDogTimerISR PROC
;;;412     */
;;;413    PVOID sysInstallWatchDogTimerISR(INT32 nIntTypeLevel, PVOID pvNewISR)
000000  e92d4038          PUSH     {r3-r5,lr}
;;;414    {
;;;415        PVOID _mOldVect = NULL;
;;;416        UINT32 volatile _mWtcr;
;;;417    
;;;418        _mWtcr = inpw(REG_WDT_CTL);
000004  e59f3034          LDR      r3,|L12.64|
000008  e593c000          LDR      r12,[r3,#0]
;;;419        _mWtcr |= 0x40;
00000c  e38cc040          ORR      r12,r12,#0x40
;;;420        outpw(REG_WDT_CTL, _mWtcr);
000010  e58dc000          STR      r12,[sp,#0]
000014  e583c000          STR      r12,[r3,#0]
;;;421        _mOldVect = sysInstallISR(nIntTypeLevel, WDT_IRQn, pvNewISR);
000018  e1a02001          MOV      r2,r1
00001c  e3a01001          MOV      r1,#1
000020  ebfffffe          BL       sysInstallISR
000024  e1a04000          MOV      r4,r0
;;;422        sysEnableInterrupt(WDT_IRQn);
000028  e3a00001          MOV      r0,#1
00002c  ebfffffe          BL       sysEnableInterrupt
;;;423        sysSetLocalInterrupt(ENABLE_IRQ);
000030  e3a0007f          MOV      r0,#0x7f
000034  ebfffffe          BL       sysSetLocalInterrupt
;;;424    
;;;425        return _mOldVect;
000038  e1a00004          MOV      r0,r4
;;;426    }
00003c  e8bd8038          POP      {r3-r5,pc}
;;;427    
                          ENDP

                  |L12.64|
                          DCD      0xb8001800

                          AREA ||i.sysResetTicks||, CODE, READONLY, ALIGN=2

                  sysResetTicks PROC
;;;150     */
;;;151    INT32 sysResetTicks(INT32 nTimeNo)
000000  e59f101c          LDR      r1,|L13.36|
;;;152    {
;;;153        switch (nTimeNo) {
000004  e3500000          CMP      r0,#0
000008  e3a02000          MOV      r2,#0                 ;152
;;;154        case TIMER0:
;;;155            _sys_uTimer0Count = 0;
00000c  0581200c          STREQ    r2,[r1,#0xc]  ; _sys_uTimer0Count
000010  0a000001          BEQ      |L13.28|
000014  e3500001          CMP      r0,#1                 ;153
;;;156            break;
;;;157    
;;;158        case TIMER1:
;;;159            _sys_uTimer1Count = 0;
000018  05812010          STREQ    r2,[r1,#0x10]  ; _sys_uTimer1Count
                  |L13.28|
;;;160            break;
;;;161    
;;;162        default:
;;;163            ;
;;;164        }
;;;165        return 0;
00001c  e3a00000          MOV      r0,#0
;;;166    }
000020  e12fff1e          BX       lr
;;;167    
                          ENDP

                  |L13.36|
                          DCD      ||.data||

                          AREA ||i.sysSetLocalTime||, CODE, READONLY, ALIGN=2

                  sysSetLocalTime PROC
;;;614    
;;;615    void sysSetLocalTime(DateTime_T ltime)
000000  e92d407c          PUSH     {r2-r6,lr}
;;;616    {
;;;617        _sys_ReferenceTime_Clock = _sys_uTimer0Count;
000004  e59f401c          LDR      r4,|L14.40|
000008  e59d5018          LDR      r5,[sp,#0x18]
00000c  e59dc01c          LDR      r12,[sp,#0x1c]
000010  e594600c          LDR      r6,[r4,#0xc]  ; _sys_uTimer0Count
000014  e584601c          STR      r6,[r4,#0x1c]  ; _sys_ReferenceTime_Clock
000018  e88d1020          STM      sp,{r5,r12}
;;;618        _sys_ReferenceTime_UTC = sysDOS_Time_To_UTC(ltime);
00001c  ebfffffe          BL       sysDOS_Time_To_UTC
000020  e584002c          STR      r0,[r4,#0x2c]  ; _sys_ReferenceTime_UTC
;;;619    }
000024  e8bd807c          POP      {r2-r6,pc}
;;;620    
                          ENDP

                  |L14.40|
                          DCD      ||.data||

                          AREA ||i.sysSetTimerEvent||, CODE, READONLY, ALIGN=2

                  sysSetTimerEvent PROC
;;;454     */
;;;455    INT32 sysSetTimerEvent(INT32 nTimeNo, UINT32 uTimeTick, PVOID pvFun)
000000  e92d4038          PUSH     {r3-r5,lr}
;;;456    {
000004  e1b03000          MOVS     r3,r0
;;;457        int volatile i;
;;;458        int val=0;
;;;459    
;;;460        switch (nTimeNo) {
;;;461        case TIMER0:
;;;462            _sys_bIsSetTime0Event = TRUE;
000008  e59fc0bc          LDR      r12,|L15.204|
00000c  e3a00000          MOV      r0,#0                 ;458
000010  e1a05000          MOV      r5,r0                 ;458
000014  e3a04001          MOV      r4,#1                 ;456
000018  0a000011          BEQ      |L15.100|
00001c  e3530001          CMP      r3,#1                 ;460
000020  1a00000e          BNE      |L15.96|
;;;463            _sys_uTime0EventCount++;
;;;464            for (i=0; i<TimerEventCount; i++) {
;;;465                if (tTime0Event[i].active == FALSE) {
;;;466                    tTime0Event[i].active = TRUE;
;;;467                    tTime0Event[i].initTick = uTimeTick;
;;;468                    tTime0Event[i].curTick = uTimeTick;
;;;469                    tTime0Event[i].funPtr = (sys_pvTimeFunPtr)pvFun;
;;;470                    val = i+1;
;;;471                    break;
;;;472                }
;;;473            }
;;;474            break;
;;;475    
;;;476        case TIMER1:
;;;477            _sys_bIsSetTime1Event = TRUE;
000024  e5cc4001          STRB     r4,[r12,#1]  ; _sys_bIsSetTime1Event
;;;478            _sys_uTime1EventCount++;
000028  e59c3018          LDR      r3,[r12,#0x18]  ; _sys_uTime1EventCount
00002c  e2833001          ADD      r3,r3,#1
000030  e58c3018          STR      r3,[r12,#0x18]  ; _sys_uTime1EventCount
;;;479            for (i=0; i<TimerEventCount; i++) {
;;;480                if (tTime1Event[i].active == FALSE) {
000034  e59f3094          LDR      r3,|L15.208|
000038  e58d5000          STR      r5,[sp,#0]
                  |L15.60|
00003c  e59dc000          LDR      r12,[sp,#0]
000040  e793c20c          LDR      r12,[r3,r12,LSL #4]
000044  e35c0000          CMP      r12,#0
000048  0a000015          BEQ      |L15.164|
00004c  e59dc000          LDR      r12,[sp,#0]           ;479
000050  e28cc001          ADD      r12,r12,#1            ;479
000054  e35c000a          CMP      r12,#0xa              ;479
000058  e58dc000          STR      r12,[sp,#0]           ;479
00005c  bafffff6          BLT      |L15.60|
                  |L15.96|
;;;481                    tTime1Event[i].active = TRUE;
;;;482                    tTime1Event[i].initTick = uTimeTick;
;;;483                    tTime1Event[i].curTick = uTimeTick;
;;;484                    tTime1Event[i].funPtr = (sys_pvTimeFunPtr)pvFun;
;;;485                    val = i+1;
;;;486                    break;
;;;487                }
;;;488            }
;;;489            break;
;;;490    
;;;491        default:
;;;492            ;
;;;493        }
;;;494    
;;;495        return val;
;;;496    }
000060  e8bd8038          POP      {r3-r5,pc}
                  |L15.100|
000064  e5cc4000          STRB     r4,[r12,#0]           ;462  ; _sys_bIsSetTime0Event
000068  e59c3014          LDR      r3,[r12,#0x14]        ;463  ; _sys_uTime0EventCount
00006c  e2833001          ADD      r3,r3,#1              ;463
000070  e58c3014          STR      r3,[r12,#0x14]        ;463  ; _sys_uTime0EventCount
000074  e59f3058          LDR      r3,|L15.212|
000078  e58d5000          STR      r5,[sp,#0]            ;465
                  |L15.124|
00007c  e59dc000          LDR      r12,[sp,#0]           ;465
000080  e793c20c          LDR      r12,[r3,r12,LSL #4]   ;465
000084  e35c0000          CMP      r12,#0                ;465
000088  0a000005          BEQ      |L15.164|
00008c  e59dc000          LDR      r12,[sp,#0]           ;464
000090  e28cc001          ADD      r12,r12,#1            ;464
000094  e35c000a          CMP      r12,#0xa              ;464
000098  e58dc000          STR      r12,[sp,#0]           ;464
00009c  bafffff6          BLT      |L15.124|
0000a0  e8bd8038          POP      {r3-r5,pc}
                  |L15.164|
0000a4  e59d0000          LDR      r0,[sp,#0]            ;466
0000a8  e7834200          STR      r4,[r3,r0,LSL #4]     ;466
0000ac  e59d0000          LDR      r0,[sp,#0]            ;467
0000b0  e0830200          ADD      r0,r3,r0,LSL #4       ;467
0000b4  e5801004          STR      r1,[r0,#4]            ;468
0000b8  e5801008          STR      r1,[r0,#8]            ;470
0000bc  e580200c          STR      r2,[r0,#0xc]          ;470
0000c0  e59d0000          LDR      r0,[sp,#0]            ;470
0000c4  e2800001          ADD      r0,r0,#1              ;470
0000c8  e8bd8038          POP      {r3-r5,pc}
;;;497    
                          ENDP

                  |L15.204|
                          DCD      ||.data||
                  |L15.208|
                          DCD      ||.bss||+0xa0
                  |L15.212|
                          DCD      ||.bss||

                          AREA ||i.sysSetTimerReferenceClock||, CODE, READONLY, ALIGN=2

                  sysSetTimerReferenceClock PROC
;;;200     */
;;;201    INT32 sysSetTimerReferenceClock(INT32 nTimeNo, UINT32 uClockRate)
000000  e59f2018          LDR      r2,|L16.32|
;;;202    {
;;;203        switch (nTimeNo) {
000004  e3500000          CMP      r0,#0
;;;204        case TIMER0:
;;;205            _sys_uTimer0ClockRate = uClockRate;
000008  05821004          STREQ    r1,[r2,#4]  ; _sys_uTimer0ClockRate
00000c  0a000001          BEQ      |L16.24|
000010  e3500001          CMP      r0,#1                 ;203
;;;206            break;
;;;207    
;;;208        case TIMER1:
;;;209            _sys_uTimer1ClockRate = uClockRate;
000014  05821008          STREQ    r1,[r2,#8]  ; _sys_uTimer1ClockRate
                  |L16.24|
;;;210            break;
;;;211    
;;;212        default:
;;;213            ;
;;;214        }
;;;215        return 0;
000018  e3a00000          MOV      r0,#0
;;;216    }
00001c  e12fff1e          BX       lr
;;;217    
                          ENDP

                  |L16.32|
                          DCD      ||.data||

                          AREA ||i.sysSetWatchDogTimerInterval||, CODE, READONLY, ALIGN=2

                  sysSetWatchDogTimerInterval PROC
;;;434     */
;;;435    INT32 sysSetWatchDogTimerInterval(INT32 nWdtInterval)
000000  e59f101c          LDR      r1,|L17.36|
;;;436    {
000004  e92d4008          PUSH     {r3,lr}
;;;437        UINT32 volatile _mWtcr;
;;;438    
;;;439        _mWtcr = inpw(REG_WDT_CTL) & ~0x700;
000008  e5912000          LDR      r2,[r1,#0]
00000c  e3c22c07          BIC      r2,r2,#0x700
;;;440        _mWtcr = _mWtcr | (nWdtInterval << 8);
000010  e1820400          ORR      r0,r2,r0,LSL #8
;;;441        outpw(REG_WDT_CTL, _mWtcr);
000014  e58d0000          STR      r0,[sp,#0]
000018  e5810000          STR      r0,[r1,#0]
;;;442    
;;;443        return 0;
00001c  e3a00000          MOV      r0,#0
;;;444    }
000020  e8bd8008          POP      {r3,pc}
;;;445    
                          ENDP

                  |L17.36|
                          DCD      0xb8001800

                          AREA ||i.sysStartTimer||, CODE, READONLY, ALIGN=2

                  sysStartTimer PROC
;;;226     */
;;;227    INT32 sysStartTimer(INT32 nTimeNo, UINT32 uTicksPerSecond, INT32 nOpMode)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;228    {
000004  e1a06001          MOV      r6,r1
;;;229        int volatile i;
;;;230        UINT32 _mTicr, _mTcr;
;;;231    
;;;232        _mTcr = 0x60000000 | (nOpMode << 27);
000008  e3a01206          MOV      r1,#0x60000000
;;;233    
;;;234        switch (nTimeNo) {
;;;235        case TIMER0:
;;;236            outpw(REG_CLK_PCLKEN0, inpw(REG_CLK_PCLKEN0)| 0x100);
;;;237            _sys_bIsTimer0Initial = TRUE;
00000c  e59f811c          LDR      r8,|L18.304|
;;;238            _sys_uTimer0TickPerSecond = uTicksPerSecond;
;;;239    
;;;240            outpw(REG_TMR0_TCSR, 0);           /* disable timer */
000010  e59f711c          LDR      r7,|L18.308|
000014  e1815d82          ORR      r5,r1,r2,LSL #27      ;232
000018  e3500000          CMP      r0,#0                 ;234
00001c  e3a0120b          MOV      r1,#0xb0000000        ;236
000020  e3a04000          MOV      r4,#0
000024  0a000002          BEQ      |L18.52|
000028  e3500001          CMP      r0,#1                 ;234
00002c  0a00001f          BEQ      |L18.176|
000030  ea00003a          B        |L18.288|
                  |L18.52|
000034  e5910218          LDR      r0,[r1,#0x218]        ;236
000038  e3800c01          ORR      r0,r0,#0x100          ;236
00003c  e5810218          STR      r0,[r1,#0x218]        ;236
000040  e3a00001          MOV      r0,#1                 ;237
000044  e5c80002          STRB     r0,[r8,#2]            ;237  ; _sys_bIsTimer0Initial
000048  e5886028          STR      r6,[r8,#0x28]         ;238  ; _sys_uTimer0TickPerSecond
00004c  e5874000          STR      r4,[r7,#0]
;;;241            outpw(REG_TMR_TISR, 1);           /* clear for safety */
000050  e5870060          STR      r0,[r7,#0x60]
;;;242    
;;;243            for (i=0; i<TimerEventCount; i++)
;;;244                tTime0Event[i].active = FALSE;
000054  e59f00dc          LDR      r0,|L18.312|
000058  e58d4000          STR      r4,[sp,#0]
                  |L18.92|
00005c  e59d1000          LDR      r1,[sp,#0]
000060  e7804201          STR      r4,[r0,r1,LSL #4]
000064  e59d1000          LDR      r1,[sp,#0]            ;243
000068  e2811001          ADD      r1,r1,#1              ;243
00006c  e351000a          CMP      r1,#0xa               ;243
000070  e58d1000          STR      r1,[sp,#0]            ;243
000074  bafffff8          BLT      |L18.92|
;;;245    
;;;246            _sys_pvOldTimer0Vect = sysInstallISR(HIGH_LEVEL_SENSITIVE | IRQ_LEVEL_1, TMR0_IRQn, (PVOID)sysTimer0ISR);
000078  e59f20bc          LDR      r2,|L18.316|
00007c  e3a01010          MOV      r1,#0x10
000080  e3a00041          MOV      r0,#0x41
000084  ebfffffe          BL       sysInstallISR
000088  e5880020          STR      r0,[r8,#0x20]  ; _sys_pvOldTimer0Vect
;;;247            sysEnableInterrupt(TMR0_IRQn);
00008c  e3a00010          MOV      r0,#0x10
000090  ebfffffe          BL       sysEnableInterrupt
;;;248    
;;;249            _sys_uTimer0Count = 0;
000094  e588400c          STR      r4,[r8,#0xc]  ; _sys_uTimer0Count
;;;250            _mTicr = _sys_uTimer0ClockRate / uTicksPerSecond;
000098  e5980004          LDR      r0,[r8,#4]  ; _sys_uTimer0ClockRate
00009c  e1a01006          MOV      r1,r6
0000a0  ebfffffe          BL       __aeabi_uidivmod
;;;251            outpw(REG_TMR0_TICR, _mTicr);
0000a4  e5870004          STR      r0,[r7,#4]
;;;252            outpw(REG_TMR0_TCSR, _mTcr);
0000a8  e5875000          STR      r5,[r7,#0]
;;;253            break;
0000ac  ea00001b          B        |L18.288|
                  |L18.176|
;;;254    
;;;255        case TIMER1:
;;;256            outpw(REG_CLK_PCLKEN0, inpw(REG_CLK_PCLKEN0)| 0x200);
0000b0  e5910218          LDR      r0,[r1,#0x218]
0000b4  e3800c02          ORR      r0,r0,#0x200
0000b8  e5810218          STR      r0,[r1,#0x218]
;;;257            outpw(REG_TMR1_TCSR, 0);           /* disable timer */
0000bc  e5874010          STR      r4,[r7,#0x10]
;;;258            outpw(REG_TMR_TISR, 2);           /* clear for safety */
0000c0  e3a00002          MOV      r0,#2
0000c4  e5870060          STR      r0,[r7,#0x60]
;;;259    
;;;260            for (i=0; i<TimerEventCount; i++)
;;;261                tTime1Event[i].active = FALSE;
0000c8  e59f0070          LDR      r0,|L18.320|
0000cc  e58d4000          STR      r4,[sp,#0]
                  |L18.208|
0000d0  e59d1000          LDR      r1,[sp,#0]
0000d4  e7804201          STR      r4,[r0,r1,LSL #4]
0000d8  e59d1000          LDR      r1,[sp,#0]            ;260
0000dc  e2811001          ADD      r1,r1,#1              ;260
0000e0  e351000a          CMP      r1,#0xa               ;260
0000e4  e58d1000          STR      r1,[sp,#0]            ;260
0000e8  bafffff8          BLT      |L18.208|
;;;262    
;;;263            _sys_pvOldTimer1Vect = sysInstallISR(HIGH_LEVEL_SENSITIVE | IRQ_LEVEL_1, TMR1_IRQn, (PVOID)sysTimer1ISR);
0000ec  e59f2050          LDR      r2,|L18.324|
0000f0  e3a01011          MOV      r1,#0x11
0000f4  e3a00041          MOV      r0,#0x41
0000f8  ebfffffe          BL       sysInstallISR
0000fc  e5880024          STR      r0,[r8,#0x24]  ; _sys_pvOldTimer1Vect
;;;264            sysEnableInterrupt(TMR1_IRQn);
000100  e3a00011          MOV      r0,#0x11
000104  ebfffffe          BL       sysEnableInterrupt
;;;265    
;;;266            _sys_uTimer1Count = 0;
000108  e5884010          STR      r4,[r8,#0x10]  ; _sys_uTimer1Count
;;;267            _mTicr = _sys_uTimer1ClockRate / uTicksPerSecond;
00010c  e5980008          LDR      r0,[r8,#8]  ; _sys_uTimer1ClockRate
000110  e1a01006          MOV      r1,r6
000114  ebfffffe          BL       __aeabi_uidivmod
;;;268            outpw(REG_TMR1_TICR, _mTicr);
000118  e5870014          STR      r0,[r7,#0x14]
;;;269            outpw(REG_TMR1_TCSR, _mTcr);
00011c  e5875010          STR      r5,[r7,#0x10]
                  |L18.288|
;;;270            break;
;;;271    
;;;272        default:
;;;273            ;
;;;274        }
;;;275        sysSetLocalInterrupt(ENABLE_IRQ);
000120  e3a0007f          MOV      r0,#0x7f
000124  ebfffffe          BL       sysSetLocalInterrupt
;;;276        return 0;
000128  e3a00000          MOV      r0,#0
;;;277    }
00012c  e8bd83f8          POP      {r3-r9,pc}
;;;278    
                          ENDP

                  |L18.304|
                          DCD      ||.data||
                  |L18.308|
                          DCD      0xb8001000
                  |L18.312|
                          DCD      ||.bss||
                  |L18.316|
                          DCD      sysTimer0ISR
                  |L18.320|
                          DCD      ||.bss||+0xa0
                  |L18.324|
                          DCD      sysTimer1ISR

                          AREA ||i.sysStopTimer||, CODE, READONLY, ALIGN=2

                  sysStopTimer PROC
;;;285     */
;;;286    INT32 sysStopTimer(INT32 nTimeNo)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;287    {
;;;288        switch (nTimeNo) {
;;;289        case TIMER0:
;;;290            _sys_bIsTimer0Initial = FALSE;
000004  e59f5080          LDR      r5,|L19.140|
;;;291            sysDisableInterrupt(TMR0_IRQn);
;;;292            sysInstallISR(HIGH_LEVEL_SENSITIVE | IRQ_LEVEL_1, TMR0_IRQn, _sys_pvOldTimer0Vect);
;;;293    
;;;294            outpw(REG_TMR0_TCSR, 0);           /* disable timer */
000008  e59f6080          LDR      r6,|L19.144|
00000c  e3500000          CMP      r0,#0                 ;288
000010  e3a04000          MOV      r4,#0                 ;287
000014  0a000002          BEQ      |L19.36|
000018  e3500001          CMP      r0,#1                 ;288
00001c  0a00000d          BEQ      |L19.88|
000020  ea000017          B        |L19.132|
                  |L19.36|
000024  e5c54002          STRB     r4,[r5,#2]            ;290  ; _sys_bIsTimer0Initial
000028  e3a00010          MOV      r0,#0x10              ;291
00002c  ebfffffe          BL       sysDisableInterrupt
000030  e5952020          LDR      r2,[r5,#0x20]         ;292  ; _sys_pvOldTimer0Vect
000034  e3a01010          MOV      r1,#0x10              ;292
000038  e3a00041          MOV      r0,#0x41              ;292
00003c  ebfffffe          BL       sysInstallISR
000040  e5864000          STR      r4,[r6,#0]
;;;295            outpw(REG_TMR_TISR, 1);           /* clear for safety */
000044  e3a00001          MOV      r0,#1
000048  e5860060          STR      r0,[r6,#0x60]
;;;296    
;;;297            _sys_uTime0EventCount = 0;
00004c  e5854014          STR      r4,[r5,#0x14]  ; _sys_uTime0EventCount
;;;298            _sys_bIsSetTime0Event = FALSE;
000050  e5c54000          STRB     r4,[r5,#0]  ; _sys_bIsSetTime0Event
;;;299            break;
000054  ea00000a          B        |L19.132|
                  |L19.88|
;;;300    
;;;301        case TIMER1:
;;;302            sysDisableInterrupt(TMR1_IRQn);
000058  e3a00011          MOV      r0,#0x11
00005c  ebfffffe          BL       sysDisableInterrupt
;;;303            sysInstallISR(HIGH_LEVEL_SENSITIVE| IRQ_LEVEL_1, TMR1_IRQn, _sys_pvOldTimer1Vect);
000060  e5952024          LDR      r2,[r5,#0x24]  ; _sys_pvOldTimer1Vect
000064  e3a01011          MOV      r1,#0x11
000068  e3a00041          MOV      r0,#0x41
00006c  ebfffffe          BL       sysInstallISR
;;;304    
;;;305    
;;;306            outpw(REG_TMR1_TCSR, 0);           /* disable timer */
000070  e5864010          STR      r4,[r6,#0x10]
;;;307            outpw(REG_TMR_TISR, 2);           /* clear for safety */
000074  e3a00002          MOV      r0,#2
000078  e5860060          STR      r0,[r6,#0x60]
;;;308    
;;;309            _sys_uTime1EventCount = 0;
00007c  e5854018          STR      r4,[r5,#0x18]  ; _sys_uTime1EventCount
;;;310            _sys_bIsSetTime1Event = FALSE;
000080  e5c54001          STRB     r4,[r5,#1]  ; _sys_bIsSetTime1Event
                  |L19.132|
;;;311            break;
;;;312    
;;;313        default:
;;;314            ;
;;;315        }
;;;316    
;;;317        return 0;
000084  e3a00000          MOV      r0,#0
;;;318    }
000088  e8bd8070          POP      {r4-r6,pc}
;;;319    
                          ENDP

                  |L19.140|
                          DCD      ||.data||
                  |L19.144|
                          DCD      0xb8001000

                          AREA ||i.sysTimer0ISR||, CODE, READONLY, ALIGN=2

                  sysTimer0ISR PROC
;;;67     /* Interrupt service routine */
;;;68     void sysTimer0ISR()
000000  e92d4038          PUSH     {r3-r5,lr}
;;;69     {
;;;70         int volatile i;
;;;71     
;;;72         /*----- check channel 0 -----*/
;;;73         if (inpw(REG_TMR_TISR) & 0x00000001) {
000004  e59f109c          LDR      r1,|L20.168|
000008  e5910060          LDR      r0,[r1,#0x60]
00000c  e3100001          TST      r0,#1
000010  0a000023          BEQ      |L20.164|
;;;74             _sys_uTimer0Count++;
000014  e59f0090          LDR      r0,|L20.172|
000018  e590200c          LDR      r2,[r0,#0xc]  ; _sys_uTimer0Count
00001c  e2822001          ADD      r2,r2,#1
000020  e580200c          STR      r2,[r0,#0xc]  ; _sys_uTimer0Count
;;;75             outpw(REG_TMR_TISR, 0x01); /* clear TIF0 */
000024  e3a02001          MOV      r2,#1
000028  e5812060          STR      r2,[r1,#0x60]
;;;76             if (_sys_uTimer0Count >= 0xfffffff)
00002c  e590200c          LDR      r2,[r0,#0xc]  ; _sys_uTimer0Count
000030  e3a01000          MOV      r1,#0
000034  e372021f          CMN      r2,#0xf0000001
;;;77                 _sys_uTimer0Count = 0;
000038  2580100c          STRCS    r1,[r0,#0xc]  ; _sys_uTimer0Count
;;;78     
;;;79             if (_sys_bIsSetTime0Event) {
00003c  e5d00000          LDRB     r0,[r0,#0]  ; _sys_bIsSetTime0Event
000040  e3500000          CMP      r0,#0
;;;80                 for (i=0; i<TimerEventCount; i++) {
;;;81                     if (tTime0Event[i].active) {
000044  159f4064          LDRNE    r4,|L20.176|
000048  158d1000          STRNE    r1,[sp,#0]            ;80
00004c  0a000014          BEQ      |L20.164|
                  |L20.80|
000050  e59d0000          LDR      r0,[sp,#0]
000054  e7940200          LDR      r0,[r4,r0,LSL #4]
000058  e3500000          CMP      r0,#0
00005c  0a00000b          BEQ      |L20.144|
;;;82                         tTime0Event[i].curTick--;
000060  e59d0000          LDR      r0,[sp,#0]
000064  e0842200          ADD      r2,r4,r0,LSL #4
000068  e5921008          LDR      r1,[r2,#8]
00006c  e2511001          SUBS     r1,r1,#1
000070  e5821008          STR      r1,[r2,#8]
;;;83                         if (tTime0Event[i].curTick == 0) {
000074  1a000005          BNE      |L20.144|
;;;84                             (*tTime0Event[i].funPtr)();
000078  e592000c          LDR      r0,[r2,#0xc]
00007c  e12fff30          BLX      r0
;;;85                             tTime0Event[i].curTick = tTime0Event[i].initTick;
000080  e59d0000          LDR      r0,[sp,#0]
000084  e0840200          ADD      r0,r4,r0,LSL #4
000088  e5901004          LDR      r1,[r0,#4]
00008c  e5801008          STR      r1,[r0,#8]
                  |L20.144|
000090  e59d0000          LDR      r0,[sp,#0]            ;80
000094  e2800001          ADD      r0,r0,#1              ;80
000098  e350000a          CMP      r0,#0xa               ;80
00009c  e58d0000          STR      r0,[sp,#0]            ;80
0000a0  baffffea          BLT      |L20.80|
                  |L20.164|
;;;86                         }
;;;87                     }
;;;88                 }
;;;89             }
;;;90         }
;;;91     }
0000a4  e8bd8038          POP      {r3-r5,pc}
;;;92     
                          ENDP

                  |L20.168|
                          DCD      0xb8001000
                  |L20.172|
                          DCD      ||.data||
                  |L20.176|
                          DCD      ||.bss||

                          AREA ||i.sysTimer1ISR||, CODE, READONLY, ALIGN=2

                  sysTimer1ISR PROC
;;;92     
;;;93     void sysTimer1ISR()
000000  e92d4038          PUSH     {r3-r5,lr}
;;;94     {
;;;95         int volatile i;
;;;96     
;;;97         /*----- check channel 1 -----*/
;;;98         if (inpw(REG_TMR_TISR) & 0x00000002) {
000004  e59f109c          LDR      r1,|L21.168|
000008  e5910060          LDR      r0,[r1,#0x60]
00000c  e3100002          TST      r0,#2
000010  0a000023          BEQ      |L21.164|
;;;99             _sys_uTimer1Count++;
000014  e59f0090          LDR      r0,|L21.172|
000018  e5902010          LDR      r2,[r0,#0x10]  ; _sys_uTimer1Count
00001c  e2822001          ADD      r2,r2,#1
000020  e5802010          STR      r2,[r0,#0x10]  ; _sys_uTimer1Count
;;;100            outpw(REG_TMR_TISR, 0x02); /* clear TIF1 */
000024  e3a02002          MOV      r2,#2
000028  e5812060          STR      r2,[r1,#0x60]
;;;101            if (_sys_uTimer1Count >= 0xfffffff)
00002c  e5902010          LDR      r2,[r0,#0x10]  ; _sys_uTimer1Count
000030  e3a01000          MOV      r1,#0
000034  e372021f          CMN      r2,#0xf0000001
;;;102                _sys_uTimer1Count = 0;
000038  25801010          STRCS    r1,[r0,#0x10]  ; _sys_uTimer1Count
;;;103    
;;;104            if (_sys_bIsSetTime1Event) {
00003c  e5d00001          LDRB     r0,[r0,#1]  ; _sys_bIsSetTime1Event
000040  e3500000          CMP      r0,#0
;;;105                for (i=0; i<TimerEventCount; i++) {
;;;106                    if (tTime1Event[i].active) {
000044  159f4064          LDRNE    r4,|L21.176|
000048  158d1000          STRNE    r1,[sp,#0]            ;105
00004c  0a000014          BEQ      |L21.164|
                  |L21.80|
000050  e59d0000          LDR      r0,[sp,#0]
000054  e7940200          LDR      r0,[r4,r0,LSL #4]
000058  e3500000          CMP      r0,#0
00005c  0a00000b          BEQ      |L21.144|
;;;107                        tTime1Event[i].curTick--;
000060  e59d0000          LDR      r0,[sp,#0]
000064  e0842200          ADD      r2,r4,r0,LSL #4
000068  e5921008          LDR      r1,[r2,#8]
00006c  e2511001          SUBS     r1,r1,#1
000070  e5821008          STR      r1,[r2,#8]
;;;108                        if (tTime1Event[i].curTick == 0) {
000074  1a000005          BNE      |L21.144|
;;;109                            (*tTime1Event[i].funPtr)();
000078  e592000c          LDR      r0,[r2,#0xc]
00007c  e12fff30          BLX      r0
;;;110                            tTime1Event[i].curTick = tTime1Event[i].initTick;
000080  e59d0000          LDR      r0,[sp,#0]
000084  e0840200          ADD      r0,r4,r0,LSL #4
000088  e5901004          LDR      r1,[r0,#4]
00008c  e5801008          STR      r1,[r0,#8]
                  |L21.144|
000090  e59d0000          LDR      r0,[sp,#0]            ;105
000094  e2800001          ADD      r0,r0,#1              ;105
000098  e350000a          CMP      r0,#0xa               ;105
00009c  e58d0000          STR      r0,[sp,#0]            ;105
0000a0  baffffea          BLT      |L21.80|
                  |L21.164|
;;;111                        }
;;;112                    }
;;;113                }
;;;114            }
;;;115        }
;;;116    }
0000a4  e8bd8038          POP      {r3-r5,pc}
;;;117    /// @endcond HIDDEN_SYMBOLS
                          ENDP

                  |L21.168|
                          DCD      0xb8001000
                  |L21.172|
                          DCD      ||.data||
                  |L21.176|
                          DCD      ||.bss||+0xa0

                          AREA ||i.sysUTC_To_DOS_Time||, CODE, READONLY, ALIGN=2

                  sysUTC_To_DOS_Time PROC
;;;570    
;;;571    void  sysUTC_To_DOS_Time(UINT32 utc, DateTime_T *dos_tm)
000000  e92d4010          PUSH     {r4,lr}
;;;572    {
000004  e1a04001          MOV      r4,r1
;;;573        int     the_year = 1970;
000008  e59f10a4          LDR      r1,|L22.180|
;;;574        int     i, seconds;
;;;575    
;;;576        while (1) {
;;;577            if (the_year % 4 == 0)
;;;578                seconds = SECONDS_366_DAY;
00000c  e59f30a4          LDR      r3,|L22.184|
;;;579            else
;;;580                seconds = SECONDS_365_DAY;
000010  e59fc0a4          LDR      r12,|L22.188|
                  |L22.20|
000014  e3110003          TST      r1,#3                 ;577
000018  01a02003          MOVEQ    r2,r3                 ;578
00001c  11a0200c          MOVNE    r2,r12
;;;581            if (utc >= seconds) {
000020  e1500002          CMP      r0,r2
;;;582                utc -= seconds;
000024  20400002          SUBCS    r0,r0,r2
000028  22811001          ADDCS    r1,r1,#1
00002c  2afffff8          BCS      |L22.20|
;;;583                the_year++;
;;;584            } else
;;;585                break;
;;;586        }
;;;587    
;;;588        dos_tm->year = the_year;
;;;589    
;;;590        if (the_year % 4 == 0)
000030  e3110003          TST      r1,#3
000034  e5841000          STR      r1,[r4,#0]            ;588
;;;591            month_seconds[1] = 29 * SECONDS_PER_DAY;
000038  e59f3080          LDR      r3,|L22.192|
00003c  059f1080          LDREQ    r1,|L22.196|
;;;592        else
;;;593            month_seconds[1] = 28 * SECONDS_PER_DAY;
000040  159f1080          LDRNE    r1,|L22.200|
000044  e5831004          STR      r1,[r3,#4]  ; month_seconds
;;;594    
;;;595        dos_tm->mon = 1;
000048  e3a01001          MOV      r1,#1
00004c  e5841004          STR      r1,[r4,#4]
;;;596        for (i = 0; i < 11; i++) {
000050  e3a01000          MOV      r1,#0
                  |L22.84|
;;;597            if (utc >= month_seconds[i]) {
000054  e7932101          LDR      r2,[r3,r1,LSL #2]
000058  e1520000          CMP      r2,r0
00005c  8a000006          BHI      |L22.124|
;;;598                utc -= month_seconds[i];
000060  e0400002          SUB      r0,r0,r2
;;;599                dos_tm->mon++;
000064  e5942004          LDR      r2,[r4,#4]
000068  e2811001          ADD      r1,r1,#1
00006c  e2822001          ADD      r2,r2,#1
000070  e351000b          CMP      r1,#0xb               ;596
000074  e5842004          STR      r2,[r4,#4]            ;596
000078  bafffff5          BLT      |L22.84|
                  |L22.124|
;;;600            } else
;;;601                break;
;;;602        }
;;;603    
;;;604        dos_tm->day = 1 + (utc / SECONDS_PER_DAY);
00007c  e59f1048          LDR      r1,|L22.204|
000080  ebfffffe          BL       __aeabi_uidivmod
000084  e2800001          ADD      r0,r0,#1
000088  e5840008          STR      r0,[r4,#8]
;;;605        utc %= SECONDS_PER_DAY;
00008c  e1a00001          MOV      r0,r1
;;;606    
;;;607        dos_tm->hour = utc / SECONDS_PER_HOUR;
000090  e3a01ee1          MOV      r1,#0xe10
000094  ebfffffe          BL       __aeabi_uidivmod
000098  e584000c          STR      r0,[r4,#0xc]
;;;608        utc %= SECONDS_PER_HOUR;
00009c  e1a00001          MOV      r0,r1
;;;609    
;;;610        dos_tm->min = utc / 60;
0000a0  e3a0103c          MOV      r1,#0x3c
0000a4  ebfffffe          BL       __aeabi_uidivmod
;;;611        dos_tm->sec = utc % 60;
0000a8  e5840010          STR      r0,[r4,#0x10]
0000ac  e5841014          STR      r1,[r4,#0x14]
;;;612    }
0000b0  e8bd8010          POP      {r4,pc}
;;;613    
                          ENDP

                  |L22.180|
                          DCD      0x000007b2
                  |L22.184|
                          DCD      0x01e28500
                  |L22.188|
                          DCD      0x01e13380
                  |L22.192|
                          DCD      ||.data||+0x30
                  |L22.196|
                          DCD      0x00263b80
                  |L22.200|
                          DCD      0x0024ea00
                  |L22.204|
                          DCD      0x00015180

                          AREA ||i.sysUpdateTickCount||, CODE, READONLY, ALIGN=2

                  sysUpdateTickCount PROC
;;;175     */
;;;176    INT32 sysUpdateTickCount(INT32 nTimeNo, UINT32 uCount)
000000  e59f2018          LDR      r2,|L23.32|
;;;177    {
;;;178        switch (nTimeNo) {
000004  e3500000          CMP      r0,#0
;;;179        case TIMER0:
;;;180            _sys_uTimer0Count = uCount;
000008  0582100c          STREQ    r1,[r2,#0xc]  ; _sys_uTimer0Count
00000c  0a000001          BEQ      |L23.24|
000010  e3500001          CMP      r0,#1                 ;178
;;;181            break;
;;;182    
;;;183        case TIMER1:
;;;184            _sys_uTimer1Count = uCount;
000014  05821010          STREQ    r1,[r2,#0x10]  ; _sys_uTimer1Count
                  |L23.24|
;;;185            break;
;;;186    
;;;187        default:
;;;188            ;
;;;189        }
;;;190        return 0;
000018  e3a00000          MOV      r0,#0
;;;191    }
00001c  e12fff1e          BX       lr
;;;192    
                          ENDP

                  |L23.32|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  tTime0Event
                          %        160
                  tTime1Event
                          %        160

                          AREA ||.data||, DATA, ALIGN=2

                  _sys_bIsSetTime0Event
000000  00                DCB      0x00
                  _sys_bIsSetTime1Event
000001  00                DCB      0x00
                  _sys_bIsTimer0Initial
000002  0000              DCB      0x00,0x00
                  _sys_uTimer0ClockRate
                          DCD      0x00b71b00
                  _sys_uTimer1ClockRate
                          DCD      0x00b71b00
                  _sys_uTimer0Count
                          DCD      0x00000000
                  _sys_uTimer1Count
                          DCD      0x00000000
                  _sys_uTime0EventCount
                          DCD      0x00000000
                  _sys_uTime1EventCount
                          DCD      0x00000000
                  _sys_ReferenceTime_Clock
                          DCD      0x00000000
                  _sys_pvOldTimer0Vect
                          DCD      0x00000000
                  _sys_pvOldTimer1Vect
                          DCD      0x00000000
                  _sys_uTimer0TickPerSecond
                          DCD      0x00000000
                  _sys_ReferenceTime_UTC
                          DCD      0x00000000
                  month_seconds
                          DCD      0x0028de80
                          DCD      0x0024ea00
                          DCD      0x0028de80
                          DCD      0x00278d00
                          DCD      0x0028de80
                          DCD      0x00278d00
                          DCD      0x0028de80
                          DCD      0x0028de80
                          DCD      0x00278d00
                          DCD      0x0028de80
                          DCD      0x00278d00
                          DCD      0x0028de80
